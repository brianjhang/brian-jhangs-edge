---
export const prerender = true;

import { getCollection } from "astro:content";
import Layout from '../../../layouts/Layout.astro';
import SocialShare from '../../../components/SocialShare.astro';
import LanguageNotice from '../../../components/LanguageNotice.astro';
import { calculateReadingTime, formatReadingTime } from '../../../utils/readingTime.js';
import { useTranslations } from '../../../i18n';

const t = useTranslations('en');

export async function getStaticPaths() {
  const allBuildPosts = await getCollection("build");

  // 標準化語言檢測函數
  const getLanguageFromSlug = (slug) => {
    const languageCodes = ['en', 'zh-cn', 'ja-jp', 'ko-kr'];
    const slugParts = slug.split('/');
    return languageCodes.includes(slugParts[0]) ? slugParts[0] : 'zh-tw';
  };

  // 智能文章選擇：英文優先，中文作為 fallback
  const getSmartPostSelection = (posts) => {
    const postMap = new Map();
    const englishPosts = [];
    const chinesePosts = [];

    posts.forEach(post => {
      const language = getLanguageFromSlug(post.slug);
      if (language === 'en') {
        englishPosts.push(post);
      } else {
        chinesePosts.push(post);
      }
    });

    // 先處理中文文章作為 fallback
    chinesePosts.forEach(post => {
      let baseSlug = post.slug;
      if (baseSlug.startsWith('build/')) {
        baseSlug = baseSlug.replace('build/', '');
      } else {
        baseSlug = post.id.replace('.mdx', '');
      }
      postMap.set(baseSlug, post);
    });

    // 然後處理英文文章，覆蓋中文文章
    englishPosts.forEach(post => {
      let baseSlug = post.slug;
      if (baseSlug.startsWith('en/build/')) {
        baseSlug = baseSlug.replace('en/build/', '');
      } else if (baseSlug.startsWith('en/')) {
        baseSlug = baseSlug.replace('en/', '');
      } else if (baseSlug.startsWith('build/')) {
        baseSlug = baseSlug.replace('build/', '');
      } else {
        baseSlug = post.id.replace('.mdx', '');
      }
      postMap.set(baseSlug, post);
    });

    return Array.from(postMap.values());
  };

  const smartPosts = getSmartPostSelection(allBuildPosts);

  return smartPosts.map(post => {
    // 根據新的多語架構生成 slug 參數
    let slugParam;
    const language = getLanguageFromSlug(post.slug);

    if (language === 'en') {
      // 英文文章：從 "en/build/tools/example" 提取 "tools/example"
      slugParam = post.slug.replace('en/build/', '');
    } else {
      // 中文文章：從 "build/tools/example" 提取 "tools/example"
      slugParam = post.slug.replace('build/', '');
    }

    return {
      params: { slug: slugParam },
      props: { post }
    };
  });
}

const { post } = Astro.props;
const { Content } = await post.render();

// 計算閱讀時間
const readingTime = calculateReadingTime(post.body);

// 檢測語言不匹配 - 使用 data.lang 或從 slug 推斷
const contentLang = post.data.lang || (post.slug.startsWith('en/') ? 'en' : 'zh-TW');
const fromLang = Astro.url.searchParams.get('from_lang');

// 判斷是否為 Fallback 頁面（英文 URL 但中文內容）
const isFallbackPage = contentLang !== 'en';

// 構建 URL
const currentUrl = `https://brianjhang.com/en/build/${Astro.params.slug}`;
const canonicalUrl = isFallbackPage
  ? `https://brianjhang.com/${post.slug}`  // 指向中文原始版本
  : currentUrl;  // 英文頁面指向自己

// 構建 hreflang URLs
const chineseUrl = `https://brianjhang.com/${post.slug.replace(/^en\//, '')}`;
const englishUrl = contentLang === 'en' ? currentUrl : null;

// 向下相容：保留 fullUrl 供 SocialShare 使用
const fullUrl = currentUrl;

// 處理 OG 圖片
const ogImage = post.data.image
  ? `https://brianjhang.com/images/og/${post.data.image}`
  : `https://brianjhang.com/og-build.png`;

const title = `${post.data.title} - ${t('nav.build')} - Brian Jhang's Edge`;
---

<Layout
  title={title}
  description={post.data.summary}
  image={ogImage}
  type="article"
  lang="en"
>
  <!-- SEO Meta 標籤：智能 Fallback 方案 -->
  <link rel="canonical" href={canonicalUrl} slot="head" />

  {isFallbackPage ? (
    <>
      <!-- Fallback 頁面：禁止索引，指向中文原始版本 -->
      <meta name="robots" content="noindex, follow" slot="head" />
      <link rel="alternate" hreflang="zh-Hant" href={chineseUrl} slot="head" />
      <link rel="alternate" hreflang="zh" href={chineseUrl} slot="head" />
    </>
  ) : (
    <>
      <!-- 真實英文頁面：雙向 hreflang -->
      <link rel="alternate" hreflang="en" href={englishUrl} slot="head" />
      <link rel="alternate" hreflang="zh-Hant" href={chineseUrl} slot="head" />
      <link rel="alternate" hreflang="zh" href={chineseUrl} slot="head" />
      <link rel="alternate" hreflang="x-default" href={englishUrl} slot="head" />
    </>
  )}

  <!-- 結構化數據 -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": post.data.title,
    "description": post.data.summary,
    "image": ogImage,
    "url": canonicalUrl,
    "datePublished": post.data.publishedDate || `${post.data.date}T00:00:00+08:00`,
    "dateModified": post.data.modifiedDate || `${post.data.date}T00:00:00+08:00`,
    "author": {
      "@type": "Person",
      "name": "Brian Jhang",
      "url": "https://brianjhang.com/en"
    },
    "publisher": {
      "@type": "Person",
      "name": "Brian Jhang"
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": currentUrl
    },
    "articleSection": t('nav.build'),
    "keywords": post.data.keywords ? post.data.keywords.join(", ") : "",
    "wordCount": post.body.split(' ').length,
    "inLanguage": "en-US"
  })}></script>

  <!-- 語言不匹配提醒 -->
  <LanguageNotice
    currentLang="en"
    contentLang={contentLang}
    fromLang={fromLang}
  />

  <article class="article-container">
    <header class="article-header">
      <nav class="breadcrumb">
        <a href="/en">{t('nav.home')}</a>
        <span>/</span>
        <a href="/en/build">{t('nav.build')}</a>
        <span>/</span>
        <span>{post.data.title}</span>
      </nav>

      <div class="article-meta">
        <span class="date">{post.data.date}</span>
        <span class="reading-time">{formatReadingTime(readingTime)}</span>
        <span class="tag tag-build">{t('nav.build')}</span>
      </div>

      <h1 class="article-title">{post.data.title}</h1>

      <p class="article-summary">{post.data.summary}</p>

      {post.data.tags && (
        <div class="article-tags">
          {post.data.tags.map(tag => (
            <span class="tag tag-outline">{tag}</span>
          ))}
        </div>
      )}

      <SocialShare
        title={post.data.title}
        url={fullUrl}
        description={post.data.summary}
      />
    </header>

    <div class="article-content">
      <Content />
    </div>

    <footer class="article-footer">
      <div class="back-link">
        <a href="/en/build">← {t('back.to.home')} {t('nav.build')}</a>
      </div>

      <SocialShare
        title={post.data.title}
        url={fullUrl}
        description={post.data.summary}
      />
    </footer>
  </article>
</Layout>

<style>
  .article-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .article-header {
    padding: 40px 0;
    border-bottom: 1px solid var(--border);
  }

  .breadcrumb {
    font-size: 14px;
    color: var(--muted);
    margin-bottom: 20px;
  }

  .breadcrumb a {
    color: var(--link);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .breadcrumb span {
    margin: 0 8px;
  }

  .article-meta {
    display: flex;
    gap: 12px;
    align-items: center;
    font-size: 14px;
    color: var(--muted);
    margin-bottom: 20px;
    flex-wrap: wrap;
  }

  .article-title {
    font-size: 42px;
    font-weight: 700;
    line-height: 1.2;
    margin: 0 0 20px;
    color: var(--brand);
  }

  .article-summary {
    font-size: 18px;
    line-height: 1.6;
    color: var(--muted);
    margin: 0 0 24px;
  }

  .article-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 24px;
  }

  .tag-build {
    background: rgba(139, 92, 246, 0.1);
    color: #8b5cf6;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 500;
  }

  .tag-outline {
    border: 1px solid var(--border);
    color: var(--muted);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
  }

  .article-content {
    padding: 40px 0;
    line-height: 1.7;
  }

  .article-content :global(h2) {
    font-size: 28px;
    font-weight: 600;
    margin: 32px 0 16px;
    color: var(--brand);
  }

  .article-content :global(h3) {
    font-size: 24px;
    font-weight: 600;
    margin: 24px 0 12px;
    color: var(--brand);
  }

  .article-content :global(p) {
    margin: 16px 0;
    color: #e5e7eb;
  }

  .article-content :global(ul, ol) {
    margin: 16px 0;
    padding-left: 24px;
  }

  .article-content :global(li) {
    margin: 8px 0;
    color: #e5e7eb;
  }

  .article-content :global(code) {
    background: var(--card);
    padding: 2px 6px;
    border-radius: 4px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 14px;
  }

  .article-content :global(pre) {
    background: var(--card);
    padding: 20px;
    border-radius: 8px;
    overflow-x: auto;
    margin: 20px 0;
  }

  .article-content :global(blockquote) {
    border-left: 4px solid var(--link);
    padding-left: 20px;
    margin: 20px 0;
    font-style: italic;
    color: var(--muted);
  }

  .article-footer {
    padding: 40px 0;
    border-top: 1px solid var(--border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
  }

  .back-link a {
    color: var(--link);
    text-decoration: none;
    font-weight: 500;
  }

  .back-link a:hover {
    text-decoration: underline;
  }

  @media (max-width: 768px) {
    .article-title {
      font-size: 32px;
    }

    .article-summary {
      font-size: 16px;
    }

    .article-meta {
      font-size: 13px;
    }

    .article-content {
      padding: 30px 0;
    }

    .article-footer {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>