---
export const prerender = true;

import { getCollection } from "astro:content";
import Layout from '../layouts/Layout.astro';
import SocialShare from '../components/SocialShare.astro';
import LanguageSwitcher from '../components/LanguageSwitcher.astro';
import { calculateReadingTime, formatReadingTime } from '../utils/readingTime.js';

// 獲取各個主題的文章並應用智能選擇
const allAIPosts = await getCollection("ai");
const allStartupPosts = await getCollection("startup");
const allCryptoPosts = await getCollection("crypto");
const allBuildPosts = await getCollection("build");

// 智能文章選擇：中文介面優先中文版，避免重複
const getSmartPostSelection = (posts) => {
  const postMap = new Map();

  // 先分離中文和非中文文章
  const chinesePosts = [];
  const nonChinesePosts = [];

  posts.forEach(post => {
    const slugParts = post.slug.split('/');
    const languageCodes = ['en', 'zh-cn', 'ja-jp', 'ko-kr'];
    const hasLanguagePrefix = languageCodes.includes(slugParts[0]);

    const isCurrentChinese = !hasLanguagePrefix &&
                            post.data.lang !== 'en' &&
                            !post.slug.endsWith('-en');

    if (isCurrentChinese) {
      chinesePosts.push(post);
    } else {
      nonChinesePosts.push(post);
    }
  });

  // 先處理非中文文章
  nonChinesePosts.forEach(post => {
    const slugParts = post.slug.split('/');
    const languageCodes = ['en', 'zh-cn', 'ja-jp', 'ko-kr'];
    const hasLanguagePrefix = languageCodes.includes(slugParts[0]);

    let baseSlug;
    if (hasLanguagePrefix) {
      // 新格式：en/ai/tools/example -> ai/tools/example
      baseSlug = slugParts.slice(1).join('/');
    } else {
      // 舊格式：tools/example-en -> tools/example
      baseSlug = post.slug.replace('-en', '');
    }

    postMap.set(baseSlug, post);
  });

  // 再處理中文文章，直接覆蓋
  chinesePosts.forEach(post => {
    // 中文文章可能是新格式 ai/tools/example 或舊格式 tools/example
    let baseSlug = post.slug.replace('-en', '');
    postMap.set(baseSlug, post);
  });

  return Array.from(postMap.values());
};

const aiPosts = getSmartPostSelection(allAIPosts);
const startupPosts = getSmartPostSelection(allStartupPosts);
const cryptoPosts = getSmartPostSelection(allCryptoPosts);
const buildPosts = getSmartPostSelection(allBuildPosts);

// 按日期排序的函數
const byDateDesc = (a, b) => new Date(b.data.date) - new Date(a.data.date);

// 手動指定精選文章的 slug（可以指定多個，會自動選最新的）
const featuredSlugs = {
  ai: [
    'tools/astroedge-complete-guide',
    'trends/openai-economic-report-2025',
    'trends/o1-reasoning-revolution',
    'trends/ai-agent-technology',
    'tools/cursor-programming-revolution'
  ],
  startup: [
    'book/naval-leverage-thinking-complete-guide',
    'book/naval-wealth-principles',
    'thiel/monopoly-business-truth'
  ],
  crypto: [
    'concepts/stablecoin-complete-analysis',
    'rwa/rwa-tokenization-complete-guide',
    'concepts/etf-impact'
  ]
};

// 獲取指定的精選文章，如果找不到則使用最新文章
const getFeaturedPost = (posts, slugs) => {
  // 如果是字符串，轉換為數組
  const slugArray = Array.isArray(slugs) ? slugs : [slugs];
  
  // 找到所有匹配的精選文章
  const featuredPosts = posts.filter(post => slugArray.includes(post.slug));
  
  if (featuredPosts.length > 0) {
    // 按 slug 在數組中的順序排序（保持指定順序）
    const orderedPosts = slugArray
      .map(slug => featuredPosts.find(post => post.slug === slug))
      .filter(post => post !== undefined);
    
    if (orderedPosts.length > 1) {
      // 使用當前日期計算輪播索引（每天更換一次）
      const today = new Date();
      const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
      const rotationIndex = dayOfYear % orderedPosts.length;
      return orderedPosts[rotationIndex];
    } else {
      // 只有一篇文章時直接返回
      return orderedPosts[0];
    }
  }
  
  // 如果找不到指定文章，回退到最新文章
  return [...posts].sort(byDateDesc)[0];
};

const latestAI = getFeaturedPost(aiPosts, featuredSlugs.ai);
const latestStartup = getFeaturedPost(startupPosts, featuredSlugs.startup);
const latestCrypto = getFeaturedPost(cryptoPosts, featuredSlugs.crypto);

// 合併所有文章並按日期排序，用於顯示最新文章
const allPosts = [...aiPosts, ...startupPosts, ...cryptoPosts, ...buildPosts];
const recentPosts = allPosts.sort(byDateDesc).slice(0, 6);

// 為文章添加閱讀時間
const postsWithReadingTime = recentPosts.map(post => ({
  ...post,
  readingTime: calculateReadingTime(post.body)
}));

const latestAIWithTime = latestAI ? { ...latestAI, readingTime: calculateReadingTime(latestAI.body) } : null;
const latestStartupWithTime = latestStartup ? { ...latestStartup, readingTime: calculateReadingTime(latestStartup.body) } : null;
const latestCryptoWithTime = latestCrypto ? { ...latestCrypto, readingTime: calculateReadingTime(latestCrypto.body) } : null;
---

<Layout 
  title="Brian Jhang's Edge — AI × Startups × Crypto"
  description="AI × Startups × Crypto：一人公司的實踐藍圖"
  ogTitle="Brian Jhang's Edge"
  ogDescription="Deep Insights for Builders ・ AI × Startups × Crypto：一人公司的實踐藍圖"
  ogType="website"
>
  <!-- 結構化數據 -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Blog",
    "name": "Brian Jhang's Edge",
    "description": "AI × Startups × Crypto：一人公司的實踐藍圖",
    "url": "https://brianjhang.com",
    "author": {
      "@type": "Person",
      "name": "Brian Jhang",
      "url": "https://brianjhang.com"
    },
    "publisher": {
      "@type": "Person",
      "name": "Brian Jhang"
    },
    "inLanguage": "zh-TW",
    "blogPost": allPosts.slice(0, 10).map(post => ({
      "@type": "BlogPosting",
      "headline": post.data.title,
      "description": post.data.summary,
      "url": `https://brianjhang.com/${post.collection}/${post.id.replace('.mdx', '')}`,
      "datePublished": post.data.publishedDate || `${post.data.date}T00:00:00+08:00`,
      "dateModified": post.data.modifiedDate || `${post.data.date}T00:00:00+08:00`,
      "author": {
        "@type": "Person",
        "name": "Brian Jhang"
      },
      "publisher": {
        "@type": "Person", 
        "name": "Brian Jhang"
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": `https://brianjhang.com/${post.collection}/${post.id.replace('.mdx', '')}`
      },
      "keywords": post.data.keywords ? post.data.keywords.join(", ") : "",
      "articleSection": post.collection === 'ai' ? 'AI小百科' : post.collection === 'startup' ? '創業筆記' : post.collection === 'build' ? '建設日誌' : '幣圈筆記'
    }))
  })}></script>
  <section class="hero">
    <div class="wrap">
      <h1>AI × Startups × Crypto</h1>
      <p>Deep Insights for Builders ・ AI × Startups × Crypto：一人公司的實踐藍圖</p>
    </div>
  </section>

  <main class="wrap">
    <section id="featured" class="section">
      <h2 class="title">知識精選</h2>
      <div class="grid grid-3">
        {latestAIWithTime && (
          <a class="card" href={`/ai/${(() => {
            // 處理 slug 邏輯：如果是新格式（以 ai/ 開頭），移除前綴；否則使用 id
            let slug = latestAIWithTime.slug;
            if (slug.startsWith('ai/')) {
              return slug.replace('ai/', '');
            } else {
              return latestAIWithTime.id.replace('.mdx', '');
            }
          })()}`}>
            <div class="muted">{latestAIWithTime.data.date} · <span class="tag tag-ai">AI小百科</span> · {formatReadingTime(latestAIWithTime.readingTime)}</div>
            <h3 style="margin:6px 0 8px 0;color:#fff">{latestAIWithTime.data.title}</h3>
            <p class="muted">{latestAIWithTime.data.summary}</p>
            {latestAIWithTime.data.tags && (
              <div class="tags">
                {latestAIWithTime.data.tags.slice(0, 3).map(tag => <span class="tag tag-small">{tag}</span>)}
              </div>
            )}
          </a>
        )}
        {latestStartupWithTime && (
          <a class="card" href={`/startup/${latestStartupWithTime.slug}`}>
            <div class="muted">{latestStartupWithTime.data.date} · <span class="tag tag-startup">創業筆記</span> · {formatReadingTime(latestStartupWithTime.readingTime)}</div>
            <h3 style="margin:6px 0 8px 0;color:#fff">{latestStartupWithTime.data.title}</h3>
            <p class="muted">{latestStartupWithTime.data.summary}</p>
            {latestStartupWithTime.data.tags && (
              <div class="tags">
                {latestStartupWithTime.data.tags.slice(0, 3).map(tag => <span class="tag tag-small">{tag}</span>)}
              </div>
            )}
          </a>
        )}
        {latestCryptoWithTime && (
          <a class="card" href={`/crypto/${latestCryptoWithTime.slug}`}>
            <div class="muted">{latestCryptoWithTime.data.date} · <span class="tag tag-crypto">幣圈筆記</span> · {formatReadingTime(latestCryptoWithTime.readingTime)}</div>
            <h3 style="margin:6px 0 8px 0;color:#fff">{latestCryptoWithTime.data.title}</h3>
            <p class="muted">{latestCryptoWithTime.data.summary}</p>
            {latestCryptoWithTime.data.tags && (
              <div class="tags">
                {latestCryptoWithTime.data.tags.slice(0, 3).map(tag => <span class="tag tag-small">{tag}</span>)}
              </div>
            )}
          </a>
        )}
      </div>
    </section>

    <section class="section">
      <h2 class="title">最新文章</h2>
      <div class="grid grid-2">
        {postsWithReadingTime.map((post) => {
          const category = post.collection === 'ai' ? 'AI小百科' :
                          post.collection === 'startup' ? '創業筆記' :
                          post.collection === 'build' ? '建設日誌' : '幣圈筆記';
          const categoryPath = post.collection;
          const tagClass = `tag tag-${post.collection}`;
          return (
            <a class="card" href={`/${categoryPath}/${post.id.replace('.mdx', '')}`}>
              <div class="muted">{post.data.date} · <span class={tagClass}>{category}</span> · {formatReadingTime(post.readingTime)}</div>
              <h3 style="margin:6px 0 8px 0;color:#fff">{post.data.title}</h3>
              <p class="muted">{post.data.summary}</p>
              {post.data.tags && (
                <div class="tags">
                  {post.data.tags.slice(0, 3).map(tag => <span class="tag tag-small">{tag}</span>)}
                </div>
              )}
            </a>
          );
        })}
      </div>
    </section>

    <section class="section">
      <h2 class="title">探索主題</h2>
      <div class="grid grid-3">
        <a class="card" href="/ai">
          <div class="tag tag-ai">AI 教育內容</div>
          <h3 style="margin:8px 0 8px;color:#fff">AI 知識與應用</h3>
          <p class="muted">從基礎概念到實際應用，深入淺出的 AI 知識分享，幫助你理解人工智慧的發展與影響。</p>
        </a>
        <a class="card" href="/startup">
          <div class="tag tag-startup">創業教育內容</div>
          <h3 style="margin:8px 0 8px;color:#fff">創業實戰指南</h3>
          <p class="muted">經典商業理論的現代應用，市場驗證、產品開發、團隊建設的實戰框架。</p>
        </a>
        <a class="card" href="/crypto">
          <div class="tag tag-crypto">Crypto 教育內容</div>
          <h3 style="margin:8px 0 8px;color:#fff">理性看待區塊鏈世界</h3>
          <p class="muted">客觀中立的加密貨幣分析，從基礎概念到深度研究，建立正確認知。</p>
        </a>
      </div>
    </section>
  </main>
</Layout>

<!-- 瀏覽器語言檢測腳本 -->
<script>
  // 瀏覽器語言檢測和自動跳轉
  function detectAndRedirectLanguage() {
    // 檢查是否已經執行過跳轉（避免無限循環）
    if (sessionStorage.getItem('languageRedirectChecked')) {
      return;
    }

    // 標記已檢查過
    sessionStorage.setItem('languageRedirectChecked', 'true');

    // 檢查當前是否在根路徑
    if (window.location.pathname !== '/') {
      return;
    }

    // 檢查是否有用戶偏好（之前手動選擇過語言）
    const userPreference = localStorage.getItem('userLanguagePreference');
    if (userPreference) {
      if (userPreference === 'en' && !window.location.pathname.startsWith('/en')) {
        window.location.href = '/en';
        return;
      } else if (userPreference === 'zh' && window.location.pathname.startsWith('/en')) {
        window.location.href = '/';
        return;
      }
      return;
    }

    // 獲取瀏覽器語言偏好
    const browserLang = navigator.language || navigator.languages[0] || 'en';
    const langCode = browserLang.toLowerCase();

    // 檢測中文語言變體 (台灣、大陸、香港、新加坡等)
    const chineseVariants = [
      'zh',      // 通用中文
      'zh-tw',   // 台灣繁體
      'zh-hk',   // 香港繁體
      'zh-mo',   // 澳門
      'zh-cn',   // 大陸簡體
      'zh-sg',   // 新加坡
      'zh-my',   // 馬來西亞
      'zh-hans', // 簡體中文
      'zh-hant'  // 繁體中文
    ];

    const isChinese = chineseVariants.some(variant =>
      langCode.startsWith(variant)
    );

    // 如果是中文瀏覽器且在根路徑，保持中文版（無需跳轉）
    // 如果不是中文瀏覽器且在根路徑，跳轉到英文版
    if (!isChinese) {
      console.log('Detected non-Chinese browser language:', browserLang, '- Redirecting to English version');
      window.location.href = '/en';
    } else {
      console.log('Detected Chinese browser language:', browserLang, '- Staying on Chinese version');
    }
  }

  // 頁面載入後執行檢測
  document.addEventListener('DOMContentLoaded', detectAndRedirectLanguage);
</script>

<!-- 語言偏好記錄腳本 -->
<script>
  // 記錄用戶的語言選擇偏好
  document.addEventListener('DOMContentLoaded', function() {
    // 監聽所有語言切換連結
    const langLinks = document.querySelectorAll('.lang-link');
    langLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        const href = this.getAttribute('href');

        // 記錄用戶偏好
        if (href === '/en' || href.startsWith('/en/')) {
          localStorage.setItem('userLanguagePreference', 'en');
        } else {
          localStorage.setItem('userLanguagePreference', 'zh');
        }
      });
    });
  });
</script>

<style>
  :root {
    --card-hover: #121218;
    --shadow: 0 4px 12px rgba(0,0,0,0.15);
    --shadow-hover: 0 8px 25px rgba(0,0,0,0.25);
    --ai: #3b82f6;
    --startup: #10b981;
    --crypto: #f59e0b;
  }

  .hero {
    background: linear-gradient(135deg, #0b0b0c 0%, #1a1a1f 100%);
    padding: 80px 0 60px;
    text-align: center;
    border-bottom: 1px solid var(--border);
  }


  .hero h1 {
    font-size: 48px;
    font-weight: 700;
    margin: 0 0 16px;
    background: linear-gradient(135deg, #fff 0%, #9ca3af 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero p {
    font-size: 18px;
    color: var(--muted);
    margin: 0;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  /* 移除以下 CSS 區塊：
  .cta {
    display: flex;
    gap: 16px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .btn {
    display: inline-block;
    padding: 12px 24px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s ease;
    border: 1px solid var(--border);
    color: var(--brand);
  }

  .btn:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
  }

  .btn.primary {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    border-color: #3b82f6;
    color: white;
  }

  .btn.primary:hover {
    background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
  }
  */

  .wrap {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .section {
    padding: 48px 0;
  }

  .title {
    font-size: 32px;
    font-weight: 700;
    margin: 0 0 32px;
    color: var(--brand);
  }

  .grid {
    display: grid;
    gap: 24px;
  }

  .grid-2 {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  .grid-3 {
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }

  .card {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 12px;
    padding: 20px;
    text-decoration: none;
    transition: all 0.2s ease;
    display: block;
  }

  .card:hover {
    background: var(--card-hover);
    border-color: #374151;
    transform: translateY(-4px);
    box-shadow: var(--shadow-hover);
  }

  /* .tag 樣式已在 global.css 中定義 */

  .tag-ai {
    background: rgba(59, 130, 246, 0.1);
    color: #60a5fa;
  }

  .tag-startup {
    background: rgba(16, 185, 129, 0.1);
    color: #34d399;
  }

  .tag-crypto {
    background: rgba(245, 158, 11, 0.1);
    color: #fbbf24;
  }

  .tag-build {
    background: rgba(139, 92, 246, 0.1);
    color: #c4b5fd;
  }

  .tag-small {
    background: rgba(156, 163, 175, 0.1);
    color: #9ca3af;
    font-size: 10px;
    padding: 2px 6px;
    margin-right: 4px;
  }

  .tags {
    margin-top: 8px;
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  .muted {
    color: var(--muted);
    font-size: 14px;
  }

  /* Mobile responsiveness */
  @media(max-width:768px) {
    .hero {
      padding: 60px 0 40px;
    }
    
    .hero h1 {
      font-size: 36px;
    }
    
    .hero p {
      font-size: 16px;
    }
    
    /* 移除以下 mobile CSS：
    .cta {
      flex-direction: column;
      align-items: center;
    }
    
    .btn {
      width: 200px;
      text-align: center;
    }
    */
    
    .section {
      padding: 32px 0;
    }
    
    .title {
      font-size: 24px;
    }
    
    .grid {
      gap: 16px;
    }
    
    .card {
      padding: 16px;
    }
    
    .cta {
      flex-direction: column;
      align-items: center;
    }
    
    .btn {
      width: 200px;
      text-align: center;
    }
  }
</style>
